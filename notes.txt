6502 emu by josh

the processor is represented as a struct. for now, the status flags are repreented as individual bools, but perhaps it could be better to use a single byte?

the opcodes can be stored in a single enum (to support disassaembly and also running of existing binaries) however it would be good to have some kind of generic way of mapping between the different address modes.

i'll need to write a parser/lexer for the assembly code. its a pretty easy syntax. only one operation is allowed per line, and it goes like this:

OPCODE [ARG...] [; COMMENT]

the parser tokenizes on whitespace, and discard any token that starts with a semicolon along with everything else after it on that line.

the lexer therefore receives a series of tuples containing the opcode and the argument if included, otherwise the arg is nil. it can then pass to the processor to execute.

wait, this is a two step process... assemble THEN execute. 

but it would be cute if there was a REPL...

so the REPL has the following options:

init - reset the processor and mem
assm f [o] - assemble a file (assembly -> binary) and save to "o".
load f - load binary file "f"
exec - run the loaded file
step [n] - perform the operation PC is poining at (and do this n times)
eval op [arg] -  assembles and executes the provided operation op in the current context and prints the binary representation
diss - dissassemble the loaded binary file
insp - dump out the processor status 
show a [n] - print n bytes of memory starting at address a

i think there are 0x600 bytes of memory available?
I think it is arranged in pages of 256 bytes, and the MSB is the page index. The stack is stored on page 1 ($100-$1FF).

the addressing modes could be slightly tricky. it makes sense to wrap each of the opcode functions with a generic function which extracts the value according to the addressing mode, and then hands off the value to the actual value. It is these functions which are indexed in the opcode map. eg, opcode $69 maps to a function which gets the immediate address and hands that off to the ADC function. opcode $65 knows it is a zero page address, so it adds a zero MSB and hands that off to the same ADC function as before.

In short, the base functions have no idea about addressing modes, they always receive absolute addresses. the wrapper is what figures that out and there is one wrapper per opcode. 

ok, I thought a lot about this over the holiday. let  me try and remember the useful stuff.

first, I need to split the project into three:

- an assembler, which takes a string as input and outputs either an error or binary object code

- a processor simulator, which represents a 6502 and some RAM. the registers and ram are freely inspectable, and object code can be loaded into the ram and then executed. need to find a neat way to execute one-shot commands too

- and application that ties these two together. it will have a command line interface, and can read files to be fed into the assembler and load binaries into the chip's ram. it will also provide and interface into the inspection of the chip state.

now I have this plan, I will build the chip first, then the assembler and finally the app to tie them together (though in reality I will jump between all three).

OK, so I think I have the first pass and second pass of the assembler figured out.

Pass 1 - main task is to figure out label addresses and jump distances. could replace the opcodes with their byte versions here, but probably wait.
Output: 
	- a text file (or array of lines) with no comments or labels, just opcodes and operands
	- a map of (label name, memory location) pairs

Pass 2 - allocate an array the size of the program (which is now known). put the PC back to 0 and start to step through the array of lines, converting the opcodes and operands to their binary equivalents. push each of these into the program array.

I keep feeling like these two stages could be merged, but it makes sense to separate them.

=================================================

After a few months busy on other things, I have realised how simple this is. I have changed things up today and made a much simpler parser which is working well so far. I just need to write the assembler to turn the Command structs into binary data, and the first stage will be complete!

I thought about having the Parser emit each command on a channel to the assembler, that could still be a good idea but I will cross that bridge when the parser is complete.